Index: README
===================================================================
--- README	(revision 0)
+++ README	(working copy)
@@ -0,0 +1,81 @@
+一、 核心类为Diff
+Diff类可以从数组或者字符串进行初始化，配置如下：
+
+-v print version
+-h print this Usage
+-l left file which to diff
+-r right file which to diff
+-t file type, 'json' or 'xml'
+-o output file
+-e ouput encode, 'utf-8' is default value
+
+e.g.
+// 初始化
+$diff = new Diff(array(
+	'-l' => LEFT_DIFF_FILE, 
+	'-r' => RIGHT_DIFF_FILE,
+	'-t' => 'json' | 'xml',
+));
+
+// 或者
+$diff = new Diff("-l LEFT_DIFF_FILE -r RIGHT_DIFF_FILE -t json");
+
+// 进行diff操作
+$diff->diff();
+
+// 输出diff结果
+$diff->output();
+
+
+二、 bin文件 bin/diff
+可执行文件，利用Diff完成diff操作的脚本
+
+
+三、 实例
+假如左侧文件 diff_l 内容为
+{"format":"example1","content":[{"align":"center"},{"align1":"center"}]}
+{"format":"this is the same line"}
+{"format":"this is the same line"}
+
+右侧文件 diff_r 内容为
+{"format":"example2","content":[{"align":"left"},{"align1":"center1"}]}
+{"format":"this is the same line2"}
+{"format":"this is the same line4"}
+{"format":"this is the same line3"}
+
+在项目根目录执行:
+bin/diff -l examples/diff_file/diff_l -r examples/diff_file/diff_r -t json
+
+输出为:
+there are 5 diff[s], next is the detail differences.
+++++++++++++
+---line 1:
+--> format
+	> example1
+	< example2
+--> content--> 0--> align
+	> center
+	< left
+--> content--> 1--> align1
+	> center
+	< center1
+
+---line 2:
+--> format
+	> this is the same line
+	< this is the same line2
+
+---line 3:
+--> format
+	> this is the same line
+	< this is the same line4
+
+---line 4:
+left is NULL
+
+说明:
+1. 共有5处不同
+2. 第一行的format值不同；content的第一个元素的align不同；content的第二个元素align1不同
+3. 第二行format不同
+4. 第三行format不同
+5. 第四行左侧为空
\ No newline at end of file

Property changes on: README
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: bin/diff
===================================================================
--- bin/diff	(revision 0)
+++ bin/diff	(working copy)
@@ -0,0 +1,46 @@
+#!/usr/bin/php
+<?php
+    /**
+     * 利用Diif类完成diff操作的用户接口文件
+     */
+    require_once('src/Diff.class.php');
+
+    $arrArg      = $_SERVER['argv'];
+    $strFileName = array_shift($arrArg);
+
+    try {
+        $objDiff = new Diff($arrArg);
+
+        // 获取配置信息
+        $arrOpt = $objDiff->getOption();
+
+        // 输出版本
+        if ($arrOpt['-v'] === true) {
+            $strVersion = Diff::getVersion();
+            echo "Diff version $strVersion\n";
+            exit();
+        }
+
+        // 输出帮助信息
+        if ($arrOpt['-h'] === true) {
+            $strUsage = Diff::getUsage();
+            echo $strUsage . PHP_EOL;
+            exit();
+        }
+
+        $objDiff->diff();
+        $objDiff->output();
+
+    } catch (Exception $e) {
+        echo $e->getMessage() . PHP_EOL;
+        echo PHP_EOL;
+        $strUsage = Diff::getUsage();
+        echo $strUsage . PHP_EOL;
+        exit();
+    }
+
+
+
+
+
+    
\ No newline at end of file

Property changes on: bin/diff
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: eagle.py
===================================================================
--- eagle.py	(revision 0)
+++ eagle.py	(working copy)
@@ -0,0 +1,284 @@
+#!/usr/bin/env python2.7
+# -*- encoding:utf-8 -*-
+"""
+eagle外壳脚本
+Created on 2014-1-27
+@author: wangtaize@baidu.com
+@copyright: www.baidu.com
+"""
+import logging
+import os
+import shutil
+import socket
+import subprocess
+import sys
+import tempfile
+import urllib
+import urllib2
+import zipfile
+
+
+# 用户目录
+USER_FOLDER = os.path.expanduser('~')
+
+# 更新接口
+UPDATE_HTTP_HOST = "http://fatcat.baidu.com/ota/update?client=eagle.py"
+# 更新接口
+VERSION_HTTP_HOST = "http://fatcat.baidu.com/ota/version?client=eagle.py"
+# module save path
+MODULE_ROOT_PATH = os.sep.join([USER_FOLDER, ".eagle"])
+if not os.path.exists(MODULE_ROOT_PATH):
+    os.mkdir(MODULE_ROOT_PATH)
+VERSION_FILE = os.sep.join([MODULE_ROOT_PATH, "version.txt"])
+USE_SHELL = sys.platform.startswith("win")
+
+def run_shell_with_returncode(command,
+                              universal_newlines=True,
+                              ):
+    """
+    执行本地系统命令函数
+    args:
+        command,执行命令list
+        universal_newlines,
+        useshell,
+        env,环境变量
+    return:
+        returncode,进程退出状态码
+        output,标准输出
+        errout,错误输出
+    """
+    
+    try:
+        p = subprocess.Popen(command,
+                          stdout=subprocess.PIPE,
+                          stderr=subprocess.PIPE,
+                          shell=USE_SHELL,
+                          universal_newlines=universal_newlines,
+                          env=os.environ)
+        output, errout = p.communicate()
+        return p.returncode, output, errout
+    except:
+        return -1, None, None
+
+
+class HttpService(object):
+    """
+    http工具类，支持get post 以及上传文件
+    """
+    def __init__(self, logger=None):
+        self.logger = logger or logging.getLogger(__name__)
+
+    def post(self, url, params):
+        """
+        post函数
+        args:
+            url,请求的url
+            parame,请求参数，支持dict 以及tuple
+        return:
+            content,返回的文本内容
+            status,请求成功与否
+        """
+        return self.__service(url, params)
+
+    def get(self, url):
+        """
+        gey函数
+        args:
+            url,请求的url
+        return:
+            content,返回的文本内容
+            status,请求成功与否
+        """
+        return self.__service(url)
+
+    def __service(self, url, params=None, timeout=50):
+        old_timeout = socket.getdefaulttimeout()
+        socket.setdefaulttimeout(timeout)
+        try:
+            # POST
+            if params:
+                self.logger.debug('post %s params[%s]' % (url, params))
+                request = urllib2.Request(url, urllib.urlencode(params))
+            # GET
+            else:
+                self.logger.debug('get %s params[%s]' % (url, params))
+                request = urllib2.Request(url)
+            request.add_header('Accept-Language', 'zh-cn')
+            response = urllib2.urlopen(request)
+            content = response.read()
+            response.close()
+            self.logger.debug('content->%s, code->%d'
+                              % (content, response.code))
+            if response.code == 200:
+                return content, True
+            return content, False
+        except Exception as ex:
+            return str(ex), False
+        finally:
+            socket.setdefaulttimeout(old_timeout)
+
+
+class ImportModuleException(Exception):
+    """
+    导入模块异常
+    """
+    pass
+
+
+class CheckVersionException(Exception):
+    """
+    检查模块版本异常
+    """
+    pass
+
+
+class PythonVersionException(Exception):
+    """
+    检查python版本不符合运行要求异常
+    """
+    pass
+
+
+class DownloadModuleException(Exception):
+    """
+    下载模块失败异常
+    """
+    pass
+
+
+class UploadManager(object):
+    """
+    upload 模块更新管家
+    """
+    def __init__(self, http_service):
+        self.http_service = http_service
+
+    def need_update(self, version_file_path, version_url):
+        """
+        检查是否需要更新模块
+        args:
+            version_file_path,本地存放version.txt位置
+            version_url,
+        return:
+            need_update, False|True,是否需要更新
+            change_list,更新列表
+        exception:
+            CheckVersionException,获取更新状态失败时抛出
+        """
+        if not os.path.exists(version_file_path):
+            raise CheckVersionException("version file(%s) does not exist" % VERSION_FILE)
+        fd = open(version_file_path, "r")
+        content_str = fd.readline()
+        fd.close()
+        content_old = eval(content_str)
+        response_content_str, status = self.http_service.get(version_url)
+        if not status:
+            raise CheckVersionException("fail to fetch the lastest version")
+        response_content = eval(response_content_str)
+        if response_content['status'] != 1:
+            raise CheckVersionException("fail to fetch the lastest version")
+        content_new = response_content['data']
+        if content_old["function_version"] == content_new["function_version"] and \
+           content_old["bug_version"] == content_new["bug_version"]:
+            return False, None
+        return True, content_new['change_list']
+
+    def update(self, module_path, update_url):
+        """
+        更新模块操作，先删除本地缓存的模块代码，再
+        从服务端获取最新模块代码
+        args:
+            module_path,本地模块代码存储路径
+            update_url,下载模块代码url
+        """
+        tmp_path = tempfile.mkdtemp()
+        tmp_module_path = ".cooder"
+        sb_tmp_module_path = os.sep.join([tmp_path, tmp_module_path])
+        os.mkdir(sb_tmp_module_path)
+        update_zip_path = self._download_module(update_url, sb_tmp_module_path)
+        update_zip = zipfile.ZipFile(update_zip_path, 'r')
+        update_zip.extractall(path=sb_tmp_module_path)
+        update_zip.close()
+        os.remove(update_zip_path)
+        if os.path.exists(module_path):
+            shutil.rmtree(module_path)
+        shutil.copytree(sb_tmp_module_path, module_path)
+
+    def _download_module(self, update_url,
+                              save_path,
+                              file_name="update.zip"):
+        """
+        实际下载代码逻辑
+        """
+        response_content, status = self.http_service.get(update_url)
+        if not status:
+            raise DownloadModuleException("fail to download module,please try again :(")
+        if save_path.endswith(os.sep):
+            save_path = save_path[:-1]
+        try:
+            full_path = os.sep.join([save_path, file_name])
+            fd = open(full_path, "wb")
+            fd.write(response_content)
+            fd.close()
+            return full_path
+        except:
+            raise DownloadModuleException("fail to download module,please try again :(")
+
+    def import_module(self, module_path):
+        """
+        导入模块，就模块路径加入到系统path
+        注意添加方式
+        args:
+            module_path,模块代码路径
+        exceptions:
+            ImportModuleException,当出入路径不存在时抛出
+        """
+        if not os.path.exists(module_path):
+            raise ImportModuleException("module(%s) does not exit" % module_path)
+        sys.path = [module_path] + sys.path
+
+    def has_cached_module(self, version_file_path):
+        """
+        检查本地是否有缓存的模块代码
+        """
+        if os.path.exists(version_file_path):
+            return True
+        return False
+
+    def check_py_version(self):
+        """
+        检查本地python版本
+        """
+        version = sys.version
+        if version and version.startswith("2.7"):
+            return
+        raise PythonVersionException("upload needs python with version 2.7 as it's runtime :(")
+
+
+if __name__ == "__main__":
+    http_service = HttpService()
+    upload_manager = UploadManager(http_service)
+    try:
+        upload_manager.check_py_version()
+        if not upload_manager.has_cached_module(VERSION_FILE):
+            print "initializing ... :~"
+            upload_manager.update(MODULE_ROOT_PATH, UPDATE_HTTP_HOST)
+        else:
+            try:
+                need_update, change_list = upload_manager.need_update(VERSION_FILE,
+                                                                      VERSION_HTTP_HOST)
+            except CheckVersionException as _:
+                need_update = False
+            if need_update:
+                print "updating ... :~"
+                upload_manager.update(MODULE_ROOT_PATH, UPDATE_HTTP_HOST)
+                print "eagle has following updates:"
+                for index, change in enumerate(change_list):
+                    print "%d.%s" % (index + 1, change)
+        upload_manager.import_module(MODULE_ROOT_PATH)
+        from client import main as MAIN
+        MAIN.main()
+    except KeyboardInterrupt:
+        sys.exit(-1)
+    except Exception as ex:
+        print str(ex)

Property changes on: eagle.py
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: examples/diff_file/diff_l
===================================================================
--- examples/diff_file/diff_l	(revision 0)
+++ examples/diff_file/diff_l	(working copy)
@@ -0,0 +1,3 @@
+{"format":"example1","content":[{"align":"center"},{"align1":"center"}]}
+{"format":"this is the same line"}
+{"format":"this is the same line"}
\ No newline at end of file

Property changes on: examples/diff_file/diff_l
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: examples/diff_file/diff_l.xml
===================================================================
--- examples/diff_file/diff_l.xml	(revision 0)
+++ examples/diff_file/diff_l.xml	(working copy)
@@ -0,0 +1,6 @@
+<content>
+<ext>
+<phone>010-59928888</phone>
+</ext>
+<Name>百度大厦</Name>
+</content>
\ No newline at end of file

Property changes on: examples/diff_file/diff_l.xml
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: examples/diff_file/diff_r
===================================================================
--- examples/diff_file/diff_r	(revision 0)
+++ examples/diff_file/diff_r	(working copy)
@@ -0,0 +1,4 @@
+{"format":"example2","content":[{"align":"left"},{"align1":"center1"}]}
+{"format":"this is the same line2"}
+{"format":"this is the same line4"}
+{"format":"this is the same line3"}
\ No newline at end of file

Property changes on: examples/diff_file/diff_r
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: examples/diff_file/diff_r.xml
===================================================================
--- examples/diff_file/diff_r.xml	(revision 0)
+++ examples/diff_file/diff_r.xml	(working copy)
@@ -0,0 +1,4 @@
+<content>
+<ext><phone>010 59928888</phone></ext>
+<name>百度大厦</name>
+</content>
\ No newline at end of file

Property changes on: examples/diff_file/diff_r.xml
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: log/error.log
===================================================================

Property changes on: log/error.log
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: src/Diff.class.php
===================================================================
--- src/Diff.class.php	(revision 0)
+++ src/Diff.class.php	(working copy)
@@ -0,0 +1,393 @@
+<?php
+require_once('src/Log.class.php');
+
+class Diff {
+    /**
+     * @var 版本信息
+     */
+    private static $strVersion = '0.5';
+
+    /**
+     * @var 配置数组
+     */
+    private $arrOpt            = array();
+    
+    /**
+     * @var Diff结果上报数组
+     */
+    private $arrReport         = array();
+    
+    /**
+     * @var 统计不同数目
+     */
+    private $intDiffNum        = 0;
+    
+    /**
+     * @var 被比较的文件数组
+     */
+    private $arrLeft           = array();
+    private $arrRight          = array();
+
+    /**
+     * 输出版本信息
+     * @return string 版本信息
+     */
+    public static function getVersion() {
+        return self::$strVersion;
+    }
+
+    /**
+     * 输出帮助信息
+     * @return string 帮助信息
+     */
+    public static function getUsage() {
+        $strUsage = <<<EOF
+Usage:
+-v print version
+-h print this Usage
+-l left file which to diff
+-r right file which to diff
+-t file type, 'json' or 'xml'
+-o output file
+-e ouput encode, 'utf-8' is default value
+EOF;
+
+        return $strUsage;
+    }
+
+    /**
+     * 从参数字符串中解析并设置配置
+     * @param $argument string | array 若是字符串, 空格隔开, 解析为数组 e.g. -t json -l LEFT_FILE -r RIGHT_FIEL ...
+     * @return boolean 操作成功返回true
+     */
+    public function __construct($argument) {
+        if (is_array($argument)) {
+            $arrArg = $argument;
+        } elseif (is_string($argument)) {
+            $arrArg = explode(' ', $argument);
+        } else {
+            $this->error("Excepted 'array' or 'string', but " . gettype($argument) . " given");
+        }
+
+        // 允许的参数
+        $arrOpt = array(
+            '-t' => '',      // 待DIFF的数据/文件类型，测试题要求实现json/xml两种类型的DIFF功能
+            '-l' => '',      // 待DIFF的左文件
+            '-r' => '',      // 待DIFF的右文件
+            '-o' => '',      // 存储对比结果的文件
+            '-e' => 'utf-8', // 编码格式，支持gbk和utf8两种格式，默认为utf8
+            '-h' => '',      // 输出帮助信息
+            '-v' => '',      // 输出版本信息
+        );
+
+        // 参数解析，将$arrOpt中对应参数设置响应的值
+        while (count($arrArg) > 0) {
+            $strArg = array_shift($arrArg);
+            if (array_key_exists($strArg, $arrOpt)) {
+                // 不需要参数的值
+                if (in_array($strArg, array('-h', '-v'))) {
+                    $strArgVal = true;
+                } else {
+                    // 配置项-x后一项即为该配置项的用户定义值
+                    $strArgVal = array_shift($arrArg);
+                }
+
+                if (!empty($strArgVal)) {
+                    if ($strArg == '-t' && !in_array($strArgVal, array('json', 'xml'))) {
+                        $this->error("wrong argument value: type $strArgVal");
+                    }
+                    $arrOpt[$strArg] = is_string($strArgVal) ? strtolower($strArgVal) : $strArgVal;
+                } else {
+                    $this->error("wrong argument num");
+                }
+            } else {
+                $this->error("wrong argument");
+            }
+        }
+
+        $this->arrOpt = $arrOpt;
+
+        // 若要获取帮助信息 或者 版本信息则忽略其他配置
+        if (!$arrOpt['-h'] && !$arrOpt['-v']) {
+            // 解析左侧文件 右侧文件 操作类型
+            if (!is_file($arrOpt['-l']) || !is_file($arrOpt['-r'])) {
+                $this->error("file not exist");
+            }
+
+            // 检查type是否符合预期
+            if (!in_array($arrOpt['-t'], array('json', 'xml'))) {
+                $this->error("type is illeage: " . $arrOpt['-t']);
+            }
+            $this->arrLeft  = $this->parse($arrOpt['-l']);
+            $this->arrRight = $this->parse($arrOpt['-r']);
+        }
+
+        return true;
+    }
+
+    /**
+     * 获取配置
+     * @return array 返回当前配置信息
+     */
+    public function getOption() {
+        return $this->arrOpt;
+    }
+
+    /**
+     * 获取diff数目
+     * @return int diff数目
+     */
+    public function getDiffNum() {
+        return $this->intDiffNum;
+    }
+
+    /**
+     * 设置输出文件
+     * @param $strOutputFile string 输出文件路径
+     * @return boolean 正常则返回true
+     */
+    public function setOutput($strOutputFile) {
+        $this->arrOpt['-o'] = $strOutputFile;
+        return true;
+    }
+
+    /**
+     * 设置输出编码
+     * @param $strEncode string 目标编码
+     * @return boolean 正常则返回true
+     */
+    public function setEncode($strEncode) {
+        $this->arrOpt['-e'] = $strEncode;
+        return true;
+    }
+
+    /**
+     * 文件解析：根据类型进行文件解析，json则将整个文件解析为大的数组，元素为每行的json数组；xml则将整个文件解析为一个数组
+     * @param $strFilePath string 目标文件路径
+     * @return array 解析后的数组
+     */
+    private function parse($strFilePath) {
+        $resFile   = new SplFileObject($strFilePath, 'rb');
+        $arrParsed = array();
+
+        switch ($this->arrOpt['-t']) {
+            case 'json':
+                while (!$resFile->eof()) {
+                    $arrParsed[] = json_decode($resFile->current(), true);
+                    $resFile->next();
+                }
+                break;
+            case 'xml':
+                $resXml    = simplexml_load_file($strFilePath);
+                $arrParsed = json_decode(json_encode($resXml), true);
+                break;
+        }
+
+        return $arrParsed;
+    }
+
+    /**
+     * 根据diff类型执行相应的比较动作
+     * @return boolean 正常则返回true
+     */
+    public function diff() {
+        switch ($this->arrOpt['-t']) {
+            case 'json':
+                $this->compareJson();
+                break;
+            case 'xml':
+                $this->compareXml();
+                break;
+            default:
+                break;
+        }
+        return true;
+    }
+
+    /**
+     * 比较json类型, 并将比较结果保存到arrReport属性中
+     * @return boolean 正常则返回true
+     */
+    private function compareJson() {
+        $arrLeft   = $this->arrLeft;
+        $arrRight  = $this->arrRight;
+        $arrIdx    = array_unique( array_merge(array_keys($arrLeft), array_keys($arrRight)) );
+
+        $this->arrReport = array_map(function($arrLJson, $arrRJson) {
+            return $this->compareArr($arrLJson, $arrRJson);
+        }, $arrLeft, $arrRight);
+
+        return true;
+    }
+
+    /**
+     * 比较xml类型, 并将比较结果保存到arrReport属性中
+     * @return boolean 正常则返回true
+     */
+    private function compareXml() {
+        $this->arrReport = $this->compareArr($this->arrLeft, $this->arrRight);
+
+        return true;
+    }
+
+    /**
+     * 比较左右数组，规则如下：
+     * 1. 一个有，一个没有则不同
+     * 2. 均有，但一个为数组，一个为字符串，则不同
+     * 3. 均有，均为数组，则递归调用
+     * 4. 均有，均为字符串，则比较
+     * @param $arrLeft array 比较的左侧数组
+     * @param $arrRight array 比较的右侧数组
+     * @param &$arrNode array 存放比较结果树的引用
+     * @return array 比较结果树
+     */
+    private function compareArr($arrLeft, $arrRight, &$arrNode=array()) {
+        // 检查输入
+        if (is_null($arrLeft)) {
+            return 'left is NULL';
+        }
+        if (is_null($arrRight)) {
+            return 'right is NULL';
+        }
+
+        // 获取待diff数组的键值合集
+        $arrKey = array_unique( array_merge(array_keys($arrLeft), array_keys($arrRight)) );
+
+        foreach ($arrKey as $key) {
+            $lItem    = array_key_exists($key, $arrLeft) ? $arrLeft[$key] : null;
+            $rItem    = array_key_exists($key, $arrRight) ? $arrRight[$key] : null;
+            $strLType = gettype($lItem);
+            $strRType = gettype($rItem);
+
+            // 如果左右该键的值类型相同 则具体再比较
+            if ($strLType === $strRType) {
+                switch ($strLType) {
+                    // 类型为int | string 则直接比较
+                    case 'integer':
+                    case 'string':
+                        if ($lItem !== $rItem) {
+                            $this->intDiffNum++;
+
+                            $arrNode[$key] = array(
+                                'leaf'  => true,
+                                'left'  => $lItem, 
+                                'right' => $rItem,
+                            );
+                        }
+                        break;
+                    // 类型为array 则递归
+                    case 'array':
+                        $this->compareArr($lItem, $rItem, $arrNode[$key]);
+                        break;
+                    default:
+                        break;
+                }
+            } else {
+                // 左右类型不同
+                $this->intDiffNum++;
+
+                $arrNode[$key] = array(
+                    'leaf'  => true,
+                    'left'  => $lItem, 
+                    'right' => $rItem,
+                );
+            }
+        }
+
+        return $arrNode;
+    }
+
+    /**
+     * 输出格式化结果
+     * @return boolean 正常则返回true
+     */
+    public function outputResult() {
+        printf("there are %d diff[s], next is the detail differences." . PHP_EOL . "++++++++++++" . PHP_EOL, $this->intDiffNum);
+
+        if ($this->arrOpt['-t'] == 'json') {
+            foreach ($this->arrReport as $intLineno => $value) {
+                $intLineno++;   // 基数从1开始
+                echo "---line $intLineno:" . PHP_EOL;
+
+                if (!empty($value)) {
+                    $this->outputLine($value);
+                } else {
+                    echo "parse error";
+                }
+                echo PHP_EOL;
+            }
+        }
+
+        if ($this->arrOpt['-t'] == 'xml') {
+            $this->outputLine($this->arrReport);
+        }
+
+        return true;
+    }
+
+    /**
+     * 将diff信息数组格式化输出到一行
+     * @param $arrLine array | string 正常情况为数组，即diff信息；异常则为string的出错信息
+     */
+    private function outputLine($arrLine, $strPath='') {
+        if (is_array($arrLine)) {
+            foreach ($arrLine as $key => $value) {
+                if (array_key_exists('leaf', $value) && $value['leaf'] === true) {
+                    echo $strPath . "--> $key" . PHP_EOL;
+                    echo "\t> " . $value['left'] . PHP_EOL;
+                    echo "\t< " . $value['right'] . PHP_EOL;
+                } else {
+                    $this->outputLine($value, $strPath . "--> $key");
+                }
+            }
+        } else {
+            echo $arrLine . PHP_EOL;
+        }
+    }
+
+    /**
+     * 输出结果
+     * @return boolean 正常则返回true
+     */
+    public function output() {
+        try {
+            ob_start();
+            $this->outputResult();
+            $strOut = ob_get_contents();
+            ob_clean();
+
+            // 检查编码
+            $strOut = iconv($this->arrOpt['-e'], 'gbk', $strOut);
+
+            // 检查输出文件
+            if (!empty($this->strOutputFile)) {
+                $resFile = new SplFileObject($this->arrOpt['-o'], 'a');
+                $resFile->fwrite($strOut);
+            } else {
+                echo $strOut;
+            }
+        } catch (Exception $e) {
+            $this->error('输出文件异常: ' .$e->getMessage());
+        }
+
+        return true;
+    }
+
+    /**
+     * 自定义抛出异常
+     * @param $strMsg string 错误信息
+     * @return boolean 正常返回true
+     */
+    private function error($strMsg) {
+        // 记入日志
+        Log::error($strMsg);
+
+        // 抛出异常
+        throw new Exception($strMsg);
+
+        return true;
+    }
+}
+
+
+

Property changes on: src/Diff.class.php
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: src/Log.class.php
===================================================================
--- src/Log.class.php	(revision 0)
+++ src/Log.class.php	(working copy)
@@ -0,0 +1,25 @@
+<?php
+Class Log
+{
+    /**
+     * @var 日志的根目录
+     */
+	private $strBasePath = 'log/';
+
+	/**
+	 * 保存错误信息
+	 * @param $strMsg string 错误信息
+	 * @return int 成功返回写入的字节数, 失败则返回false
+	 */
+	public static function error($strMsg) {
+		$strPath = $this->strBasePath . 'error.log';
+
+		$intWrote = file_put_contents($strPath, $strMsg, FILE_APPEND);
+
+		return $intWrote > 0 ? $intWrote : false;
+	}
+}
+
+
+
+

Property changes on: src/Log.class.php
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: svn.diff
===================================================================
--- svn.diff	(revision 0)
+++ svn.diff	(working copy)
@@ -0,0 +1,989 @@
+Index: README
+===================================================================
+--- README	(revision 0)
++++ README	(working copy)
+@@ -0,0 +1,81 @@
++一、 核心类为Diff
++Diff类可以从数组或者字符串进行初始化，配置如下：
++
++-v print version
++-h print this Usage
++-l left file which to diff
++-r right file which to diff
++-t file type, 'json' or 'xml'
++-o output file
++-e ouput encode, 'utf-8' is default value
++
++e.g.
++// 初始化
++$diff = new Diff(array(
++	'-l' => LEFT_DIFF_FILE, 
++	'-r' => RIGHT_DIFF_FILE,
++	'-t' => 'json' | 'xml',
++));
++
++// 或者
++$diff = new Diff("-l LEFT_DIFF_FILE -r RIGHT_DIFF_FILE -t json");
++
++// 进行diff操作
++$diff->diff();
++
++// 输出diff结果
++$diff->output();
++
++
++二、 bin文件 bin/diff
++可执行文件，利用Diff完成diff操作的脚本
++
++
++三、 实例
++假如左侧文件 diff_l 内容为
++{"format":"example1","content":[{"align":"center"},{"align1":"center"}]}
++{"format":"this is the same line"}
++{"format":"this is the same line"}
++
++右侧文件 diff_r 内容为
++{"format":"example2","content":[{"align":"left"},{"align1":"center1"}]}
++{"format":"this is the same line2"}
++{"format":"this is the same line4"}
++{"format":"this is the same line3"}
++
++在项目根目录执行:
++bin/diff -l examples/diff_file/diff_l -r examples/diff_file/diff_r -t json
++
++输出为:
++there are 5 diff[s], next is the detail differences.
++++++++++++++
++---line 1:
++--> format
++	> example1
++	< example2
++--> content--> 0--> align
++	> center
++	< left
++--> content--> 1--> align1
++	> center
++	< center1
++
++---line 2:
++--> format
++	> this is the same line
++	< this is the same line2
++
++---line 3:
++--> format
++	> this is the same line
++	< this is the same line4
++
++---line 4:
++left is NULL
++
++说明:
++1. 共有5处不同
++2. 第一行的format值不同；content的第一个元素的align不同；content的第二个元素align1不同
++3. 第二行format不同
++4. 第三行format不同
++5. 第四行左侧为空
+\ No newline at end of file
+
+Property changes on: README
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Index: bin/diff
+===================================================================
+--- bin/diff	(revision 0)
++++ bin/diff	(working copy)
+@@ -0,0 +1,46 @@
++#!/usr/bin/php
++<?php
++    /**
++     * 利用Diif类完成diff操作的用户接口文件
++     */
++    require_once('src/Diff.class.php');
++
++    $arrArg      = $_SERVER['argv'];
++    $strFileName = array_shift($arrArg);
++
++    try {
++        $objDiff = new Diff($arrArg);
++
++        // 获取配置信息
++        $arrOpt = $objDiff->getOption();
++
++        // 输出版本
++        if ($arrOpt['-v'] === true) {
++            $strVersion = Diff::getVersion();
++            echo "Diff version $strVersion\n";
++            exit();
++        }
++
++        // 输出帮助信息
++        if ($arrOpt['-h'] === true) {
++            $strUsage = Diff::getUsage();
++            echo $strUsage . PHP_EOL;
++            exit();
++        }
++
++        $objDiff->diff();
++        $objDiff->output();
++
++    } catch (Exception $e) {
++        echo $e->getMessage() . PHP_EOL;
++        echo PHP_EOL;
++        $strUsage = Diff::getUsage();
++        echo $strUsage . PHP_EOL;
++        exit();
++    }
++
++
++
++
++
++    
+\ No newline at end of file
+
+Property changes on: bin/diff
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Added: svn:executable
+## -0,0 +1 ##
++*
+\ No newline at end of property
+Index: eagle.py
+===================================================================
+--- eagle.py	(revision 0)
++++ eagle.py	(working copy)
+@@ -0,0 +1,284 @@
++#!/usr/bin/env python2.7
++# -*- encoding:utf-8 -*-
++"""
++eagle外壳脚本
++Created on 2014-1-27
++@author: wangtaize@baidu.com
++@copyright: www.baidu.com
++"""
++import logging
++import os
++import shutil
++import socket
++import subprocess
++import sys
++import tempfile
++import urllib
++import urllib2
++import zipfile
++
++
++# 用户目录
++USER_FOLDER = os.path.expanduser('~')
++
++# 更新接口
++UPDATE_HTTP_HOST = "http://fatcat.baidu.com/ota/update?client=eagle.py"
++# 更新接口
++VERSION_HTTP_HOST = "http://fatcat.baidu.com/ota/version?client=eagle.py"
++# module save path
++MODULE_ROOT_PATH = os.sep.join([USER_FOLDER, ".eagle"])
++if not os.path.exists(MODULE_ROOT_PATH):
++    os.mkdir(MODULE_ROOT_PATH)
++VERSION_FILE = os.sep.join([MODULE_ROOT_PATH, "version.txt"])
++USE_SHELL = sys.platform.startswith("win")
++
++def run_shell_with_returncode(command,
++                              universal_newlines=True,
++                              ):
++    """
++    执行本地系统命令函数
++    args:
++        command,执行命令list
++        universal_newlines,
++        useshell,
++        env,环境变量
++    return:
++        returncode,进程退出状态码
++        output,标准输出
++        errout,错误输出
++    """
++    
++    try:
++        p = subprocess.Popen(command,
++                          stdout=subprocess.PIPE,
++                          stderr=subprocess.PIPE,
++                          shell=USE_SHELL,
++                          universal_newlines=universal_newlines,
++                          env=os.environ)
++        output, errout = p.communicate()
++        return p.returncode, output, errout
++    except:
++        return -1, None, None
++
++
++class HttpService(object):
++    """
++    http工具类，支持get post 以及上传文件
++    """
++    def __init__(self, logger=None):
++        self.logger = logger or logging.getLogger(__name__)
++
++    def post(self, url, params):
++        """
++        post函数
++        args:
++            url,请求的url
++            parame,请求参数，支持dict 以及tuple
++        return:
++            content,返回的文本内容
++            status,请求成功与否
++        """
++        return self.__service(url, params)
++
++    def get(self, url):
++        """
++        gey函数
++        args:
++            url,请求的url
++        return:
++            content,返回的文本内容
++            status,请求成功与否
++        """
++        return self.__service(url)
++
++    def __service(self, url, params=None, timeout=50):
++        old_timeout = socket.getdefaulttimeout()
++        socket.setdefaulttimeout(timeout)
++        try:
++            # POST
++            if params:
++                self.logger.debug('post %s params[%s]' % (url, params))
++                request = urllib2.Request(url, urllib.urlencode(params))
++            # GET
++            else:
++                self.logger.debug('get %s params[%s]' % (url, params))
++                request = urllib2.Request(url)
++            request.add_header('Accept-Language', 'zh-cn')
++            response = urllib2.urlopen(request)
++            content = response.read()
++            response.close()
++            self.logger.debug('content->%s, code->%d'
++                              % (content, response.code))
++            if response.code == 200:
++                return content, True
++            return content, False
++        except Exception as ex:
++            return str(ex), False
++        finally:
++            socket.setdefaulttimeout(old_timeout)
++
++
++class ImportModuleException(Exception):
++    """
++    导入模块异常
++    """
++    pass
++
++
++class CheckVersionException(Exception):
++    """
++    检查模块版本异常
++    """
++    pass
++
++
++class PythonVersionException(Exception):
++    """
++    检查python版本不符合运行要求异常
++    """
++    pass
++
++
++class DownloadModuleException(Exception):
++    """
++    下载模块失败异常
++    """
++    pass
++
++
++class UploadManager(object):
++    """
++    upload 模块更新管家
++    """
++    def __init__(self, http_service):
++        self.http_service = http_service
++
++    def need_update(self, version_file_path, version_url):
++        """
++        检查是否需要更新模块
++        args:
++            version_file_path,本地存放version.txt位置
++            version_url,
++        return:
++            need_update, False|True,是否需要更新
++            change_list,更新列表
++        exception:
++            CheckVersionException,获取更新状态失败时抛出
++        """
++        if not os.path.exists(version_file_path):
++            raise CheckVersionException("version file(%s) does not exist" % VERSION_FILE)
++        fd = open(version_file_path, "r")
++        content_str = fd.readline()
++        fd.close()
++        content_old = eval(content_str)
++        response_content_str, status = self.http_service.get(version_url)
++        if not status:
++            raise CheckVersionException("fail to fetch the lastest version")
++        response_content = eval(response_content_str)
++        if response_content['status'] != 1:
++            raise CheckVersionException("fail to fetch the lastest version")
++        content_new = response_content['data']
++        if content_old["function_version"] == content_new["function_version"] and \
++           content_old["bug_version"] == content_new["bug_version"]:
++            return False, None
++        return True, content_new['change_list']
++
++    def update(self, module_path, update_url):
++        """
++        更新模块操作，先删除本地缓存的模块代码，再
++        从服务端获取最新模块代码
++        args:
++            module_path,本地模块代码存储路径
++            update_url,下载模块代码url
++        """
++        tmp_path = tempfile.mkdtemp()
++        tmp_module_path = ".cooder"
++        sb_tmp_module_path = os.sep.join([tmp_path, tmp_module_path])
++        os.mkdir(sb_tmp_module_path)
++        update_zip_path = self._download_module(update_url, sb_tmp_module_path)
++        update_zip = zipfile.ZipFile(update_zip_path, 'r')
++        update_zip.extractall(path=sb_tmp_module_path)
++        update_zip.close()
++        os.remove(update_zip_path)
++        if os.path.exists(module_path):
++            shutil.rmtree(module_path)
++        shutil.copytree(sb_tmp_module_path, module_path)
++
++    def _download_module(self, update_url,
++                              save_path,
++                              file_name="update.zip"):
++        """
++        实际下载代码逻辑
++        """
++        response_content, status = self.http_service.get(update_url)
++        if not status:
++            raise DownloadModuleException("fail to download module,please try again :(")
++        if save_path.endswith(os.sep):
++            save_path = save_path[:-1]
++        try:
++            full_path = os.sep.join([save_path, file_name])
++            fd = open(full_path, "wb")
++            fd.write(response_content)
++            fd.close()
++            return full_path
++        except:
++            raise DownloadModuleException("fail to download module,please try again :(")
++
++    def import_module(self, module_path):
++        """
++        导入模块，就模块路径加入到系统path
++        注意添加方式
++        args:
++            module_path,模块代码路径
++        exceptions:
++            ImportModuleException,当出入路径不存在时抛出
++        """
++        if not os.path.exists(module_path):
++            raise ImportModuleException("module(%s) does not exit" % module_path)
++        sys.path = [module_path] + sys.path
++
++    def has_cached_module(self, version_file_path):
++        """
++        检查本地是否有缓存的模块代码
++        """
++        if os.path.exists(version_file_path):
++            return True
++        return False
++
++    def check_py_version(self):
++        """
++        检查本地python版本
++        """
++        version = sys.version
++        if version and version.startswith("2.7"):
++            return
++        raise PythonVersionException("upload needs python with version 2.7 as it's runtime :(")
++
++
++if __name__ == "__main__":
++    http_service = HttpService()
++    upload_manager = UploadManager(http_service)
++    try:
++        upload_manager.check_py_version()
++        if not upload_manager.has_cached_module(VERSION_FILE):
++            print "initializing ... :~"
++            upload_manager.update(MODULE_ROOT_PATH, UPDATE_HTTP_HOST)
++        else:
++            try:
++                need_update, change_list = upload_manager.need_update(VERSION_FILE,
++                                                                      VERSION_HTTP_HOST)
++            except CheckVersionException as _:
++                need_update = False
++            if need_update:
++                print "updating ... :~"
++                upload_manager.update(MODULE_ROOT_PATH, UPDATE_HTTP_HOST)
++                print "eagle has following updates:"
++                for index, change in enumerate(change_list):
++                    print "%d.%s" % (index + 1, change)
++        upload_manager.import_module(MODULE_ROOT_PATH)
++        from client import main as MAIN
++        MAIN.main()
++    except KeyboardInterrupt:
++        sys.exit(-1)
++    except Exception as ex:
++        print str(ex)
+
+Property changes on: eagle.py
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Added: svn:executable
+## -0,0 +1 ##
++*
+\ No newline at end of property
+Index: examples/diff_file/diff_l
+===================================================================
+--- examples/diff_file/diff_l	(revision 0)
++++ examples/diff_file/diff_l	(working copy)
+@@ -0,0 +1,3 @@
++{"format":"example1","content":[{"align":"center"},{"align1":"center"}]}
++{"format":"this is the same line"}
++{"format":"this is the same line"}
+\ No newline at end of file
+
+Property changes on: examples/diff_file/diff_l
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Added: svn:executable
+## -0,0 +1 ##
++*
+\ No newline at end of property
+Index: examples/diff_file/diff_l.xml
+===================================================================
+--- examples/diff_file/diff_l.xml	(revision 0)
++++ examples/diff_file/diff_l.xml	(working copy)
+@@ -0,0 +1,6 @@
++<content>
++<ext>
++<phone>010-59928888</phone>
++</ext>
++<Name>百度大厦</Name>
++</content>
+\ No newline at end of file
+
+Property changes on: examples/diff_file/diff_l.xml
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Added: svn:executable
+## -0,0 +1 ##
++*
+\ No newline at end of property
+Index: examples/diff_file/diff_r
+===================================================================
+--- examples/diff_file/diff_r	(revision 0)
++++ examples/diff_file/diff_r	(working copy)
+@@ -0,0 +1,4 @@
++{"format":"example2","content":[{"align":"left"},{"align1":"center1"}]}
++{"format":"this is the same line2"}
++{"format":"this is the same line4"}
++{"format":"this is the same line3"}
+\ No newline at end of file
+
+Property changes on: examples/diff_file/diff_r
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Added: svn:executable
+## -0,0 +1 ##
++*
+\ No newline at end of property
+Index: examples/diff_file/diff_r.xml
+===================================================================
+--- examples/diff_file/diff_r.xml	(revision 0)
++++ examples/diff_file/diff_r.xml	(working copy)
+@@ -0,0 +1,4 @@
++<content>
++<ext><phone>010 59928888</phone></ext>
++<name>百度大厦</name>
++</content>
+\ No newline at end of file
+
+Property changes on: examples/diff_file/diff_r.xml
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Index: log/error.log
+===================================================================
+
+Property changes on: log/error.log
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Index: src/Diff.class.php
+===================================================================
+--- src/Diff.class.php	(revision 0)
++++ src/Diff.class.php	(working copy)
+@@ -0,0 +1,393 @@
++<?php
++require_once('src/Log.class.php');
++
++class Diff {
++    /**
++     * @var 版本信息
++     */
++    private static $strVersion = '0.5';
++
++    /**
++     * @var 配置数组
++     */
++    private $arrOpt            = array();
++    
++    /**
++     * @var Diff结果上报数组
++     */
++    private $arrReport         = array();
++    
++    /**
++     * @var 统计不同数目
++     */
++    private $intDiffNum        = 0;
++    
++    /**
++     * @var 被比较的文件数组
++     */
++    private $arrLeft           = array();
++    private $arrRight          = array();
++
++    /**
++     * 输出版本信息
++     * @return string 版本信息
++     */
++    public static function getVersion() {
++        return self::$strVersion;
++    }
++
++    /**
++     * 输出帮助信息
++     * @return string 帮助信息
++     */
++    public static function getUsage() {
++        $strUsage = <<<EOF
++Usage:
++-v print version
++-h print this Usage
++-l left file which to diff
++-r right file which to diff
++-t file type, 'json' or 'xml'
++-o output file
++-e ouput encode, 'utf-8' is default value
++EOF;
++
++        return $strUsage;
++    }
++
++    /**
++     * 从参数字符串中解析并设置配置
++     * @param $argument string | array 若是字符串, 空格隔开, 解析为数组 e.g. -t json -l LEFT_FILE -r RIGHT_FIEL ...
++     * @return boolean 操作成功返回true
++     */
++    public function __construct($argument) {
++        if (is_array($argument)) {
++            $arrArg = $argument;
++        } elseif (is_string($argument)) {
++            $arrArg = explode(' ', $argument);
++        } else {
++            $this->error("Excepted 'array' or 'string', but " . gettype($argument) . " given");
++        }
++
++        // 允许的参数
++        $arrOpt = array(
++            '-t' => '',      // 待DIFF的数据/文件类型，测试题要求实现json/xml两种类型的DIFF功能
++            '-l' => '',      // 待DIFF的左文件
++            '-r' => '',      // 待DIFF的右文件
++            '-o' => '',      // 存储对比结果的文件
++            '-e' => 'utf-8', // 编码格式，支持gbk和utf8两种格式，默认为utf8
++            '-h' => '',      // 输出帮助信息
++            '-v' => '',      // 输出版本信息
++        );
++
++        // 参数解析，将$arrOpt中对应参数设置响应的值
++        while (count($arrArg) > 0) {
++            $strArg = array_shift($arrArg);
++            if (array_key_exists($strArg, $arrOpt)) {
++                // 不需要参数的值
++                if (in_array($strArg, array('-h', '-v'))) {
++                    $strArgVal = true;
++                } else {
++                    // 配置项-x后一项即为该配置项的用户定义值
++                    $strArgVal = array_shift($arrArg);
++                }
++
++                if (!empty($strArgVal)) {
++                    if ($strArg == '-t' && !in_array($strArgVal, array('json', 'xml'))) {
++                        $this->error("wrong argument value: type $strArgVal");
++                    }
++                    $arrOpt[$strArg] = is_string($strArgVal) ? strtolower($strArgVal) : $strArgVal;
++                } else {
++                    $this->error("wrong argument num");
++                }
++            } else {
++                $this->error("wrong argument");
++            }
++        }
++
++        $this->arrOpt = $arrOpt;
++
++        // 若要获取帮助信息 或者 版本信息则忽略其他配置
++        if (!$arrOpt['-h'] && !$arrOpt['-v']) {
++            // 解析左侧文件 右侧文件 操作类型
++            if (!is_file($arrOpt['-l']) || !is_file($arrOpt['-r'])) {
++                $this->error("file not exist");
++            }
++
++            // 检查type是否符合预期
++            if (!in_array($arrOpt['-t'], array('json', 'xml'))) {
++                $this->error("type is illeage: " . $arrOpt['-t']);
++            }
++            $this->arrLeft  = $this->parse($arrOpt['-l']);
++            $this->arrRight = $this->parse($arrOpt['-r']);
++        }
++
++        return true;
++    }
++
++    /**
++     * 获取配置
++     * @return array 返回当前配置信息
++     */
++    public function getOption() {
++        return $this->arrOpt;
++    }
++
++    /**
++     * 获取diff数目
++     * @return int diff数目
++     */
++    public function getDiffNum() {
++        return $this->intDiffNum;
++    }
++
++    /**
++     * 设置输出文件
++     * @param $strOutputFile string 输出文件路径
++     * @return boolean 正常则返回true
++     */
++    public function setOutput($strOutputFile) {
++        $this->arrOpt['-o'] = $strOutputFile;
++        return true;
++    }
++
++    /**
++     * 设置输出编码
++     * @param $strEncode string 目标编码
++     * @return boolean 正常则返回true
++     */
++    public function setEncode($strEncode) {
++        $this->arrOpt['-e'] = $strEncode;
++        return true;
++    }
++
++    /**
++     * 文件解析：根据类型进行文件解析，json则将整个文件解析为大的数组，元素为每行的json数组；xml则将整个文件解析为一个数组
++     * @param $strFilePath string 目标文件路径
++     * @return array 解析后的数组
++     */
++    private function parse($strFilePath) {
++        $resFile   = new SplFileObject($strFilePath, 'rb');
++        $arrParsed = array();
++
++        switch ($this->arrOpt['-t']) {
++            case 'json':
++                while (!$resFile->eof()) {
++                    $arrParsed[] = json_decode($resFile->current(), true);
++                    $resFile->next();
++                }
++                break;
++            case 'xml':
++                $resXml    = simplexml_load_file($strFilePath);
++                $arrParsed = json_decode(json_encode($resXml), true);
++                break;
++        }
++
++        return $arrParsed;
++    }
++
++    /**
++     * 根据diff类型执行相应的比较动作
++     * @return boolean 正常则返回true
++     */
++    public function diff() {
++        switch ($this->arrOpt['-t']) {
++            case 'json':
++                $this->compareJson();
++                break;
++            case 'xml':
++                $this->compareXml();
++                break;
++            default:
++                break;
++        }
++        return true;
++    }
++
++    /**
++     * 比较json类型, 并将比较结果保存到arrReport属性中
++     * @return boolean 正常则返回true
++     */
++    private function compareJson() {
++        $arrLeft   = $this->arrLeft;
++        $arrRight  = $this->arrRight;
++        $arrIdx    = array_unique( array_merge(array_keys($arrLeft), array_keys($arrRight)) );
++
++        $this->arrReport = array_map(function($arrLJson, $arrRJson) {
++            return $this->compareArr($arrLJson, $arrRJson);
++        }, $arrLeft, $arrRight);
++
++        return true;
++    }
++
++    /**
++     * 比较xml类型, 并将比较结果保存到arrReport属性中
++     * @return boolean 正常则返回true
++     */
++    private function compareXml() {
++        $this->arrReport = $this->compareArr($this->arrLeft, $this->arrRight);
++
++        return true;
++    }
++
++    /**
++     * 比较左右数组，规则如下：
++     * 1. 一个有，一个没有则不同
++     * 2. 均有，但一个为数组，一个为字符串，则不同
++     * 3. 均有，均为数组，则递归调用
++     * 4. 均有，均为字符串，则比较
++     * @param $arrLeft array 比较的左侧数组
++     * @param $arrRight array 比较的右侧数组
++     * @param &$arrNode array 存放比较结果树的引用
++     * @return array 比较结果树
++     */
++    private function compareArr($arrLeft, $arrRight, &$arrNode=array()) {
++        // 检查输入
++        if (is_null($arrLeft)) {
++            return 'left is NULL';
++        }
++        if (is_null($arrRight)) {
++            return 'right is NULL';
++        }
++
++        // 获取待diff数组的键值合集
++        $arrKey = array_unique( array_merge(array_keys($arrLeft), array_keys($arrRight)) );
++
++        foreach ($arrKey as $key) {
++            $lItem    = array_key_exists($key, $arrLeft) ? $arrLeft[$key] : null;
++            $rItem    = array_key_exists($key, $arrRight) ? $arrRight[$key] : null;
++            $strLType = gettype($lItem);
++            $strRType = gettype($rItem);
++
++            // 如果左右该键的值类型相同 则具体再比较
++            if ($strLType === $strRType) {
++                switch ($strLType) {
++                    // 类型为int | string 则直接比较
++                    case 'integer':
++                    case 'string':
++                        if ($lItem !== $rItem) {
++                            $this->intDiffNum++;
++
++                            $arrNode[$key] = array(
++                                'leaf'  => true,
++                                'left'  => $lItem, 
++                                'right' => $rItem,
++                            );
++                        }
++                        break;
++                    // 类型为array 则递归
++                    case 'array':
++                        $this->compareArr($lItem, $rItem, $arrNode[$key]);
++                        break;
++                    default:
++                        break;
++                }
++            } else {
++                // 左右类型不同
++                $this->intDiffNum++;
++
++                $arrNode[$key] = array(
++                    'leaf'  => true,
++                    'left'  => $lItem, 
++                    'right' => $rItem,
++                );
++            }
++        }
++
++        return $arrNode;
++    }
++
++    /**
++     * 输出格式化结果
++     * @return boolean 正常则返回true
++     */
++    public function outputResult() {
++        printf("there are %d diff[s], next is the detail differences." . PHP_EOL . "++++++++++++" . PHP_EOL, $this->intDiffNum);
++
++        if ($this->arrOpt['-t'] == 'json') {
++            foreach ($this->arrReport as $intLineno => $value) {
++                $intLineno++;   // 基数从1开始
++                echo "---line $intLineno:" . PHP_EOL;
++
++                if (!empty($value)) {
++                    $this->outputLine($value);
++                } else {
++                    echo "parse error";
++                }
++                echo PHP_EOL;
++            }
++        }
++
++        if ($this->arrOpt['-t'] == 'xml') {
++            $this->outputLine($this->arrReport);
++        }
++
++        return true;
++    }
++
++    /**
++     * 将diff信息数组格式化输出到一行
++     * @param $arrLine array | string 正常情况为数组，即diff信息；异常则为string的出错信息
++     */
++    private function outputLine($arrLine, $strPath='') {
++        if (is_array($arrLine)) {
++            foreach ($arrLine as $key => $value) {
++                if (array_key_exists('leaf', $value) && $value['leaf'] === true) {
++                    echo $strPath . "--> $key" . PHP_EOL;
++                    echo "\t> " . $value['left'] . PHP_EOL;
++                    echo "\t< " . $value['right'] . PHP_EOL;
++                } else {
++                    $this->outputLine($value, $strPath . "--> $key");
++                }
++            }
++        } else {
++            echo $arrLine . PHP_EOL;
++        }
++    }
++
++    /**
++     * 输出结果
++     * @return boolean 正常则返回true
++     */
++    public function output() {
++        try {
++            ob_start();
++            $this->outputResult();
++            $strOut = ob_get_contents();
++            ob_clean();
++
++            // 检查编码
++            $strOut = iconv($this->arrOpt['-e'], 'gbk', $strOut);
++
++            // 检查输出文件
++            if (!empty($this->strOutputFile)) {
++                $resFile = new SplFileObject($this->arrOpt['-o'], 'a');
++                $resFile->fwrite($strOut);
++            } else {
++                echo $strOut;
++            }
++        } catch (Exception $e) {
++            $this->error('输出文件异常: ' .$e->getMessage());
++        }
++
++        return true;
++    }
++
++    /**
++     * 自定义抛出异常
++     * @param $strMsg string 错误信息
++     * @return boolean 正常返回true
++     */
++    private function error($strMsg) {
++        // 记入日志
++        Log::error($strMsg);
++
++        // 抛出异常
++        throw new Exception($strMsg);
++
++        return true;
++    }
++}
++
++
++
+
+Property changes on: src/Diff.class.php
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
+Index: src/Log.class.php
+===================================================================
+--- src/Log.class.php	(revision 0)
++++ src/Log.class.php	(working copy)
+@@ -0,0 +1,25 @@
++<?php
++Class Log
++{
++    /**
++     * @var 日志的根目录
++     */
++	private $strBasePath = 'log/';
++
++	/**
++	 * 保存错误信息
++	 * @param $strMsg string 错误信息
++	 * @return int 成功返回写入的字节数, 失败则返回false
++	 */
++	public static function error($strMsg) {
++		$strPath = $this->strBasePath . 'error.log';
++
++		$intWrote = file_put_contents($strPath, $strMsg, FILE_APPEND);
++
++		return $intWrote > 0 ? $intWrote : false;
++	}
++}
++
++
++
++
+
+Property changes on: src/Log.class.php
+___________________________________________________________________
+Added: svn:eol-style
+## -0,0 +1 ##
++native
+\ No newline at end of property
Index: tests/DiffTest.class.php
===================================================================
--- tests/DiffTest.class.php	(revision 0)
+++ tests/DiffTest.class.php	(working copy)
@@ -0,0 +1,88 @@
+<?php
+/**
+ * Diff测试类
+ * @author liufuxin 2015.12.13
+ */
+require('thirdsrc/autoload.php');
+require('src/Diff.class.php');
+
+class DiffTest extends PHPUnit_Framework_TestCase
+{
+	/**
+	 * @expectedException Exception
+	 */
+	public function testInitWithWrongType() {
+		new Diff('-l examples/diff_file/diff_l -r examples/diff_file/diff_r -t WORONG_TYPE');
+	}
+
+	/**
+	 * @expectedException Exception
+	 */
+	public function testInitWithWrongLeftFile() {
+		new Diff('-l __FILE_NOT_EXISTES__ -r examples/diff_file/diff_r -t json');
+	}
+
+	/**
+	 * @expectedException Exception
+	 */
+	public function testInitWithWrongRightFile() {
+		new Diff('-l examples/diff_file/src/diff_l -r __FILE_NOT_EXISTES__ -t json');
+	}
+
+	/**
+	 * 测试编码设置
+	 */
+	public function testSetEncode() {
+		$objDiff = new Diff('-l examples/diff_file/diff_l -r examples/diff_file/diff_r -t json');
+
+		// 默认utf-8
+		$arrOpt = $objDiff->getOption();
+		$this->assertEquals('utf-8', $arrOpt['-e']);
+
+		// 设置为gbk
+		$objDiff->setEncode('gbk');
+
+		$arrOpt = $objDiff->getOption();
+		$this->assertEquals('gbk', $arrOpt['-e']);
+	}
+
+	/**
+	 * 测试版本输出
+	 */
+	public function testVersion() {
+		$this->assertEquals('0.5', Diff::getVersion());
+	}
+
+	/**
+	 * 测试json比较
+	 */
+	public function testJsonDiff() {
+		$objDiff = new Diff('-l examples/diff_file/diff_l -r examples/diff_file/diff_r -t json');
+		$objDiff->diff();
+
+		// 5处不同
+		$this->assertEquals(5, $objDiff->getDiffNum());
+	}
+
+	/**
+	 * 测试xml比较
+	 */
+	public function testXmlDiff() {
+		$objDiff = new Diff('-l examples/diff_file/diff_l.xml -r examples/diff_file/diff_r.xml -t xml');
+		$objDiff->diff();
+
+		// 3处不同
+		$this->assertEquals(3, $objDiff->getDiffNum());
+	}
+}
+
+
+
+
+
+
+
+
+
+
+

Property changes on: tests/DiffTest.class.php
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
